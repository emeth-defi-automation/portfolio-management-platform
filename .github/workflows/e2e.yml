name: E2E

on:
  push:
    # branches: ["master", "dev"]
    branches: ["test/*"]
  pull_request:
    # branches: ["master", "dev"]
    branches: ["test/*"]

env:
  # Workflow context variables
  NODE_VERSION: "21.7.3"
  APP_DATABASE_PORT: 8000
  APP_PORT: 3000
  PLAYWRIGHT_TEST_RESULTS_RELATIVE_PATH: test-results/
  PLAYWRIGHT_TEST_REPORT_RELATIVE_PATH: test-report/
  PLAYWRIGHT_TEST_RESULTS_ARTIFACT_RETENTION_DAYS: 7
  PLAYWRIGHT_VERSION:
  # App config context variables
  PUBLIC_PROJECT_ID: ${{ vars.PUBLIC_PROJECT_ID }}
  PUBLIC_METADATA_NAME: ${{ vars.PUBLIC_METADATA_NAME }}
  PUBLIC_METADATA_DESCRIPTION: ${{ vars.PUBLIC_METADATA_DESCRIPTION }}
  PUBLIC_EMETH_CONTRACT_ADDRESS: ${{ vars.PUBLIC_EMETH_CONTRACT_ADDRESS }}
  PUBLIC_EMETH_CONTRACT_ADDRESS_SEPOLIA: ${{ vars.PUBLIC_EMETH_CONTRACT_ADDRESS_SEPOLIA }}
  PW_BASE_URL: ${{ vars.PW_BASE_URL }}
  NGROK_STATIC_DOMAIN: ${{ vars.NGROK_STATIC_DOMAIN }}
  SURREALDB_URL: ${{ secrets.SURREALDB_URL }}
  SURREALDB_USER: ${{ secrets.SURREALDB_USER }}
  SURREALDB_PASS: ${{ secrets.SURREALDB_PASS }}
  SURREALDB_NS: ${{ secrets.SURREALDB_NS }}
  SURREALDB_DB: ${{ secrets.SURREALDB_DB }}
  ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET }}
  REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET }}
  UNISWAP_SUBGRAPH_URL: ${{ secrets.UNISWAP_SUBGRAPH_URL }}
  UNIV3_OPTIMIST_SUBGRAPH_URL: ${{ secrets.UNIV3_OPTIMIST_SUBGRAPH_URL }}
  MORALIS_API_KEY: ${{ secrets.MORALIS_API_KEY }}
  NGROK_WEBHOOK_URL: ${{ secrets.NGROK_WEBHOOK_URL }}
  NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

jobs:
  e2e:
    name: End-to-end tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright/test | sed 's/.*@//;s/ deduped//' | sort | uniq)
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

      - name: Cache Playwright dependencies
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

      - name: Install Playwright dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run test.e2e.setup

      - name: Install SurrealDB CLI
        run: curl -sSf https://install.surrealdb.com | sh

      - name: Install ngrok
        run: curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok

      - name: Configure ngrok
        run: ngrok authtoken ${{ env.NGROK_AUTH_TOKEN }}

      - name: Run ngrok
        uses: JarvusInnovations/background-action@v1
        with:
          run: ngrok http --domain=${{ env.NGROK_STATIC_DOMAIN }} ${{ env.APP_PORT }} > /dev/null &
          wait-on: http-get://localhost:4040/status

      - name: Start app database
        uses: JarvusInnovations/background-action@v1
        with:
          run: ./scripts/database-setup.sh
          wait-on: http-get://localhost:${{ env.APP_DATABASE_PORT }}/status

      - name: Provision app database data
        run: ./scripts/database-provision.sh

      - name: Cache synpress wallets
        uses: actions/cache@v4
        id: synpress-wallets-cache
        with:
          path: ./.cache-synpress
          key: ${{ runner.os }}-synpress-wallets-${{ hashFiles('**/.cache-synpress/**') }}

      - name: Run synpress build
        if: steps.synpress-wallets-cache.outputs.cache-hit != 'true'
        run: npm run test.e2e.build.ci

      - name: Cache app build
        uses: actions/cache@v4
        id: app-build-cache
        with:
          path: |
            ./dist
            ./server
          key: ${{ runner.os }}-build-${{ hashFiles('**/src/**', '**/public/**', '**/package-lock.json') }}

      - name: Run build
        if: steps.app-build-cache.outputs.cache-hit != 'true'
        run: npm run build

      - name: Serve app production build
        uses: JarvusInnovations/background-action@v1
        with:
          run: npm run serve
          wait-on: http-get://localhost:${{ env.APP_PORT }}

      - name: Run tests
        uses: coactions/setup-xvfb@v1
        with:
          run: npm run test.e2e.ci

      # - name: Install extra dependencies
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install --no-install-recommends -y \
      #     fluxbox \
      #     x11-xserver-utils \
      #     x11-utils \
      #     xvfb

      # - name: Run tests
      #   run: |
      #     Xvfb :0 -screen 0 1024x768x24 -listen tcp -ac &
      #     sleep 3
      #     fluxbox &
      #     sleep 3
      #     npm run test.e2e.ci
      #   env:
      #     DISPLAY: :0.0

      # - name: Run tests
      #   run: npm run test.e2e.ci

      - name: Save results artifact
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: playwright-test-results
          path: |
            ${{ env.PLAYWRIGHT_TEST_RESULTS_RELATIVE_PATH }}
            ${{ env.PLAYWRIGHT_TEST_REPORT_RELATIVE_PATH}}
          retention-days: ${{ env.PLAYWRIGHT_TEST_RESULTS_ARTIFACT_RETENTION_DAYS }}
